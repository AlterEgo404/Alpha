import discord
from discord.ext import commands
from discord.ui import View, Button
import json
import os
import random
import datetime
import asyncio
from PIL import Image, ImageDraw, ImageFont
import io
import math
import aiohttp

intents = discord.Intents.all()
bot = commands.Bot(command_prefix='$', intents=intents, help_command=None)

def draw_text_with_outline(draw, text, position, font, outline_color="black", fill_color="white"):
    x, y = position
    offsets = [(-2, 0), (2, 0), (0, -2), (0, 2), (-2, -2), (2, -2), (-2, 2), (2, 2)]
    for ox, oy in offsets:
        draw.text((x + ox, y + oy), text, font=font, fill=outline_color)
    draw.text((x, y), text, font=font, fill=fill_color)

dice_emojis = {
    0: "<a:dice_roll:1362951541132099584>",
    1: "<:dice_1:1362951590302056849>",
    2: "<:dice_2:1362951604600307792>",
    3: "<:dice_3:1362951621717266463>",
    4: "<:dice_4:1362951636573487227>",
    5: "<:dice_5:1362951651853336727>",
    6: "<:dice_6:1362951664729854152>"
}

coin = "<:meme_coin:1362951683814199487>"

def load_json(file_name, default_data=None):
    """Load d·ªØ li·ªáu t·ª´ file JSON. N·∫øu file kh√¥ng t·ªìn t·∫°i, t·∫°o m·ªõi v·ªõi d·ªØ li·ªáu m·∫∑c ƒë·ªãnh."""
    if not os.path.exists(file_name):
        default_data = default_data or {}
        with open(file_name, 'w', encoding='utf-8') as f:
            json.dump(default_data, f, ensure_ascii=False, indent=4)

    with open(file_name, 'r', encoding='utf-8') as f:
        return json.load(f)

def save_json(file_name, data):
    """L∆∞u d·ªØ li·ªáu v√†o file JSON."""
    with open(file_name, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# Load d·ªØ li·ªáu
from data_handler import (
    get_user, update_user, create_user, save_user_full,get_jackpot, update_jackpot, set_jackpot,create_leaderboard
    )
shop_data = load_json('shop_data.json')
save_shop_data = lambda data: save_json('shop_data.json', data)
tu_vi = load_json('tu_vi.json')
save_tu_vi = lambda data: save_json('tu_vi.json', data)
gacha_data = load_json('gacha_data.json')
save_gacha_data = lambda data: save_json('gacha_data.json', data)

try:
    with open("backgrounds.json", "r") as f:
        user_backgrounds = json.load(f)
except FileNotFoundError:
    user_backgrounds = {}

async def update_company_balances():
    while True:
        all_users = get_user("*")
        for user_id, data in all_users.items():
            if isinstance(data, dict) and data.get("company_balance", 0) > 0:
                balance = data["company_balance"]
                modifier = random.choice([-0.01, 0.02])
                new_balance = balance + balance * modifier
                data["company_balance"] = max(0, int(new_balance))
                update_user(user_id, {"company_balance": data["company_balance"]})

        await asyncio.sleep(60)

async def clean_zero_items():
    while True:
        all_users = get_user("*")
        for user_id, data in all_users.items():
            if isinstance(data, dict) and "items" in data:
                new_items = {item: count for item, count in data["items"].items() if count > 0}
                if new_items != data["items"]:
                    update_user(user_id, {"items": new_items})
        await asyncio.sleep(10)

async def check_permission(ctx):
    if ctx.author.id != 1196335145964285984 and ctx.channel.id != ALLOWED_CHANNEL_ID:
        await ctx.reply(f"L·ªánh n√†y ch·ªâ c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng trong <#1347480186198949920>")
        return False
    return True

async def check_user_data(ctx, user_id):
    if not get_user(user_id):
        await ctx.reply("C√≥ v·∫ª b·∫°n ch∆∞a ch∆°i l·∫ßn n√†o tr∆∞·ªõc ƒë√¢y vui l√≤ng d√πng `$start` ƒë·ªÉ t·∫°o t√†i kho·∫£n.")
        return False
    return True

async def fetch_image(url):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status != 200:
                    print(f"L·ªói t·∫£i ·∫£nh: {resp.status} - {url}")
                    return None
                image_bytes = await resp.read()

        # Ki·ªÉm tra d·ªØ li·ªáu c√≥ ph·∫£i ·∫£nh h·ª£p l·ªá kh√¥ng
        image = Image.open(io.BytesIO(image_bytes))
        return image.convert("RGBA")  # Chuy·ªÉn th√†nh RGBA ƒë·ªÉ tr√°nh l·ªói khi d√°n ·∫£nh

    except Exception as e:
        print(f"L·ªói khi t·∫£i ·∫£nh: {e}")
        return None
    
async def update_roles(ctx, member, level):
    """C·∫≠p nh·∫≠t vai tr√≤ cho ng∆∞·ªùi d√πng d·ª±a tr√™n c·∫•p ƒë·ªô."""
    for role_info in tu_vi.values():
        role = ctx.guild.get_role(role_info["id"])
        if role and role in member.roles:
            await member.remove_roles(role)

    role_name = None
    for name, info in sorted(tu_vi.items(), key=lambda x: x[1]["level_min"], reverse=True):
        if level >= info["level_min"]:
            role_name = name
            role_id = info["id"]
            break

    if role_name:
        role = ctx.guild.get_role(role_id)
        if role and role not in member.roles:
            await member.add_roles(role)
    else:
        role_name = "None"

    return role_name

def count_items(items):
    """ƒê·∫øm s·ªë l∆∞·ª£ng t·ª´ng lo·∫°i item."""
    item_counts = {}
    for item_name in items:
        item_counts[item_name] = item_counts.get(item_name, 0) + 1
    return item_counts

def format_item_display(item_counts):
    """ƒê·ªãnh d·∫°ng hi·ªÉn th·ªã danh s√°ch ƒë·ªì."""
    item_display = []
    for item_name, count in item_counts.items():
        icon = shop_data.get(item_name, {}).get('icon', '')
        item_display.append(f"`{count}` {icon} {item_name}" if icon else f"`{count}` {item_name}")
    return "\n".join(item_display) if item_display else "Tr·ªëng"

def update_jackpot(loss_amount):
    current = get_jackpot()
    update_jackpot(loss_amount)

def create_leaderboard(key="points"):
    """T·∫°o b·∫£ng x·∫øp h·∫°ng t·ª´ MongoDB d·ª±a tr√™n key (m·∫∑c ƒë·ªãnh l√† 'points')."""
    all_users = get_user("*")
    sorted_users = sorted(
        ((user_id, data) for user_id, data in all_users.items()
         if isinstance(data, dict) and key in data),
        key=lambda x: x[1][key],
        reverse=True
    )

    leaderboard = "\n".join(
        f"> <@{user_id}>: {format_currency(data[key])} {coin}"
        for user_id, data in sorted_users
    )

    return leaderboard if leaderboard else "Kh√¥ng c√≥ d·ªØ li·ªáu."

def calculate_level_and_progress(smart):
    level = int(math.log2(smart / 5 + 1)) + 1
    needed_smart = 5 * ((2 ** (level - 1)) - 1)
    current_smart = max(0, smart - 5 * ((2 ** (level - 2)) - 1)) if level > 1 else smart
    
    next_level_needed_smart = 5 * ((2 ** level) - 1)
    progress_percentage = min((smart / next_level_needed_smart) * 100, 100) if next_level_needed_smart > 0 else 0

    return level, round(progress_percentage, 2), next_level_needed_smart

def roll_gacha_from_pool():
    # B∆∞·ªõc 1: Random ch·ªçn nh√≥m tr∆∞·ªõc
    rarity_list = list(gacha_data["rarity_chance"].keys())
    rarity_weights = list(gacha_data["rarity_chance"].values())

    selected_rarity = random.choices(rarity_list, weights=rarity_weights, k=1)[0]

    # B∆∞·ªõc 2: Random v·∫≠t ph·∫©m trong nh√≥m ƒë√£ ch·ªçn
    item_name = random.choice(gacha_data["gacha_pool"][selected_rarity])

    return {"name": item_name, "rarity": selected_rarity}

def format_currency(amount):
    return f"{amount:,.0f}".replace(",", " ")

ALLOWED_CHANNEL_ID = 1347480186198949920

@bot.event
async def on_ready():
    print(f'Bot ƒë√£ ƒëƒÉng nh·∫≠p v·ªõi t√™n {bot.user}')
    bot.loop.create_task(update_company_balances())
    bot.loop.create_task(clean_zero_items())

    # Ki·ªÉm tra n·∫øu ch∆∞a c√≥ jackpot trong DB th√¨ t·∫°o m·ªõi
    if get_jackpot() is None:
        set_jackpot(1000000000)
        print("ƒê√£ kh·ªüi t·∫°o jackpot m·∫∑c ƒë·ªãnh.")

@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandNotFound):
        await ctx.reply("L·ªánh b·∫°n nh·∫≠p kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i :>")
    elif isinstance(error, commands.MissingRequiredArgument):
        await ctx.reply("B·∫°n thi·∫øu m·ªôt tham s·ªë c·∫ßn thi·∫øt. Vui l√≤ng ki·ªÉm tra l·∫°i c√∫ ph√°p l·ªánh.")
    elif isinstance(error, commands.BadArgument):
        await ctx.reply("ƒê·ªëi s·ªë b·∫°n nh·∫≠p kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.")
    else:
        # In l·ªói ra console ƒë·ªÉ debug
        print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {type(error).__name__} - {error}")
        await ctx.reply("ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën. Vui l√≤ng th·ª≠ l·∫°i sau!")

@bot.command(name="start", help='`$start`\n> Kh·ªüi t·∫°o t√†i kho·∫£n')
async def start(ctx):
    user_id = str(ctx.author.id)
    member = ctx.author

    if user_id in user_data:
        await ctx.reply(f"B·∫°n ƒë√£ c√≥ t√†i kho·∫£n r·ªìi, {ctx.author.mention} ∆°i! Kh√¥ng c·∫ßn t·∫°o l·∫°i n·ªØa.")
        return

    # Kh·ªüi t·∫°o t√†i kho·∫£n m·ªõi
    user_data[user_id] = {
        "points": 10000,
        "items": {},
        "smart": 100
    }

    # Ki·ªÉm tra vai tr√≤ v√† th√™m vai tr√≤ cho ng∆∞·ªùi d√πng
    role_id = 1316985467853606983
    role = ctx.guild.get_role(role_id)
    if role:
        if role not in member.roles:
            await member.add_roles(role)
        else:
            print(f"{member.name} ƒë√£ c√≥ vai tr√≤ {role.name}")
    else:
        await ctx.reply("Kh√¥ng th·ªÉ t√¨m th·∫•y vai tr√≤ c·∫ßn thi·∫øt trong server.")

    # L∆∞u l·∫°i d·ªØ li·ªáu ng∆∞·ªùi d√πng
    save_user_data(user_data)

    # Th√¥ng b√°o cho ng∆∞·ªùi d√πng
    await ctx.reply(f"T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng, {ctx.author.mention}!")

@bot.command(name="info", help='`$info`\n> xem th√¥ng tin c·ªßa Bot')
async def info(ctx):
    if not await check_permission(ctx):
        return

    embed = discord.Embed(title="üìä Th√¥ng tin Bot", color=discord.Color.red())
    embed.add_field(name="üë©‚Äçüíª Nh√† ph√°t tri·ªÉn", value=f"```ansi\n[2;31mAlpha[0m```", inline=True)
    embed.add_field(name="Phi√™n b·∫£n Bot", value=f'```ansi\n[2;34m2.0.0[0m\n```')
    embed.set_thumbnail(url='https://cdn.discordapp.com/attachments/1322746396142604378/1322746745440043143/2.png?ex=6771ff67&is=6770ade7&hm=a9ec85dbd4076a807af3bccecb32e2eb8bd4b577d2a34f6e8d95dfbc4a9f327a&')

    await ctx.reply(embed=embed)

@bot.command(name="jar", help='`$jar`\n> xem h≈© jackpot')
async def jp(ctx):
    if not await check_permission(ctx):
        return

    jackpot_amount = format_currency(user_data.get('jackpot', 0))
    await ctx.reply(f"üí∞ **Jackpot hi·ªán t·∫°i:** {jackpot_amount} {coin}")
@bot.command(name="mk", help='`$mk`\n> xem c·ª≠a h√†ng')
async def shop(ctx):
    if not await check_permission(ctx):
        return

    embed = discord.Embed(
        title='üè¨**C·ª≠a h√†ng**\nMua b·∫±ng l·ªánh `$buy <id> <s·ªë l∆∞·ª£ng>`.\nB√°n b·∫±ng l·ªánh `$sell <id> <s·ªë l∆∞·ª£ng>`.',
        color=discord.Color.red())

    for item_id, item in shop_data.items():
        embed.add_field(
            name=f"`{item_id}` {item['name']}\n`{format_currency(item['price'])}` {coin}",
            value=f"\t",
            inline=True
        )

    await ctx.reply(embed=embed)

@bot.command(name="buy")
async def buy(ctx, item_id: str, quantity: int):
    if not await check_permission(ctx):
        return

    user_id = str(ctx.author.id)

    if not await check_user_data(ctx, user_id):
        return

    if item_id not in shop_data:
        await ctx.reply("Kh√¥ng t√¨m th·∫•y m·∫∑t h√†ng trong c·ª≠a h√†ng.")
        return

    if quantity <= 0:
        await ctx.reply("S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n kh√¥ng.")
        return

    item_data = shop_data[item_id]
    item_name = item_data['name']

    # L·∫•y danh s√°ch v·∫≠t ph·∫©m c·ªßa ng∆∞·ªùi d√πng
    user_items = user_data[user_id].get('items', {})

    total_price = item_data['price'] * quantity

    if total_price > user_data[user_id]['points']:
        await ctx.reply("B·∫°n l√†m ƒë√©o g√¨ c√≥ ƒë·ªß ti·ªÅn m√† ƒë√≤i mua")
        return
    
    if item_id == "01":
        if "company_balance" not in user_data[user_id]:
            user_data[user_id]["company_balance"] = 0

    if item_id == "03":
        if "company_balance" not in user_data[user_id]:
            user_data[user_id]["garden"] = {}

    # Tr·ª´ ƒëi·ªÉm c·ªßa ng∆∞·ªùi d√πng
    user_data[user_id]['points'] -= total_price

    # Th√™m v·∫≠t ph·∫©m v√†o kho ƒë·ªì c·ªßa ng∆∞·ªùi d√πng
    user_items[item_name] = user_items.get(item_name, 0) + quantity
    user_data[user_id]['items'] = user_items

    save_user_data(user_data)

    await ctx.reply(f"B·∫°n ƒë√£ mua {quantity} {item_name}.")

@bot.command(name="sell")
async def sell(ctx, item_id: str, quantity: int):
    if not await check_permission(ctx):
        return

    user_id = str(ctx.author.id)

    if not await check_user_data(ctx, user_id):
        return

    if item_id not in shop_data:
        await ctx.reply("M√©o th·∫•y m·∫∑t h√†ng n√†y trong c·ª≠a h√†ng.")
        return

    if quantity <= 0:
        await ctx.reply("S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n kh√¥ng.")
        return

    item_data = shop_data[item_id]
    item_name = item_data['name']
    selling_price = round(item_data['price'] * quantity * 0.9)

    # L·∫•y danh s√°ch v·∫≠t ph·∫©m c·ªßa ng∆∞·ªùi d√πng
    user_items = user_data[user_id].get('items', {})

    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ƒë·ªß v·∫≠t ph·∫©m ƒë·ªÉ b√°n kh√¥ng
    current_quantity = user_items.get(item_name, 0)
    
    if current_quantity < quantity:
        await ctx.reply("B·∫°n kh√¥ng c√≥ ƒë·ªß m·∫∑t h√†ng n√†y ƒë·ªÉ b√°n.")
        return

    # Tr·ª´ s·ªë l∆∞·ª£ng v·∫≠t ph·∫©m t·ª´ kho ƒë·ªì ng∆∞·ªùi d√πng
    user_items[item_name] -= quantity

    # Ki·ªÉm tra v√† x√≥a `company_balance` n·∫øu b√°n ID "01" v√† kh√¥ng c√≤n trong kho
    if item_id == "01" and "company_balance" in user_data[user_id]:
        if user_data[user_id]['items'].get(":office: C√¥ng ty", 0) == 0:
            del user_data[user_id]["company_balance"]

    # C·∫≠p nh·∫≠t ƒëi·ªÉm c·ªßa ng∆∞·ªùi d√πng
    user_data[user_id]['points'] += selling_price
    user_data[user_id]['items'] = user_items

    save_user_data(user_data)

    await ctx.reply(f"B·∫°n ƒë√£ b√°n {quantity} {item_name} v√† nh·∫≠n ƒë∆∞·ª£c {format_currency(selling_price)} {coin}.")

@bot.command(name="ttsp", help="`$ttsp <id s·∫£n ph·∫©m>`\n> Hi·ªÉn th·ªã th√¥ng tin s·∫£n ph·∫©m")
async def ttsp(ctx, item_id):
    if item_id in shop_data:
        item_data = shop_data[item_id]
        embed = discord.Embed(
            title=f"Th√¥ng tin s·∫£n ph·∫©m:\n{item_data['name']}",
            color=discord.Color.red()
        )
        embed.add_field(name="M√¥ t·∫£", value=item_data['description'], inline=False)
        embed.add_field(name="Gi√° mua", value=f'`{format_currency(item_data["price"])}` {coin}', inline=True)
        embed.add_field(name="Gi√° b√°n", value=f'`{format_currency(round(item_data["price"] * 0.9))}` {coin}', inline=True)
        await ctx.reply(embed=embed)
    else:
        await ctx.reply("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID n√†y.")

@bot.command(name="setb")
async def set_background(ctx, member: discord.Member, background_url: str):
    if ctx.author.id != 1196335145964285984:
        await ctx.reply("Ch·ªâ ng∆∞·ªùi d√πng ƒë∆∞·ª£c ph√©p m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.")
        return

    if not background_url.startswith("http"):
        await ctx.reply("URL kh√¥ng h·ª£p l·ªá. Vui l√≤ng cung c·∫•p m·ªôt URL h·ª£p l·ªá.")
        return

    user_id = str(member.id)
    user_backgrounds[user_id] = background_url

    # L∆∞u l·∫°i d·ªØ li·ªáu v√†o file
    with open("backgrounds.json", "w") as f:
        json.dump(user_backgrounds, f, indent=4)

    await ctx.reply(f"ƒê√£ thay ƒë·ªïi n·ªÅn c·ªßa {member.display_name} th√†nh: {background_url}")

@bot.command(name="cccd", help='`$cccd`\n> m·ªü cƒÉn c∆∞·ªõc c√¥ng d√¢n')
async def cccd(ctx, member: discord.Member = None, size: int = 128):
    if not await check_permission(ctx):
        return

    if member is None:
        member = ctx.author

    user_id = str(member.id)
    background_url = user_backgrounds.get(user_id, "https://hinhanhonline.com/Hinhanh/images07/AnhAL/hinh-nen-may-tinh-dep-doc-dao-nhat-19.jpg") if isinstance(user_backgrounds, dict) else "https://hinhanhonline.com/Hinhanh/images07/AnhAL/hinh-nen-may-tinh-dep-doc-dao-nhat-19.jpg"

    if not await check_user_data(ctx, user_id):
        return

    smart = user_data[user_id]["smart"]
    user_name = member.name
    avatar_url = member.display_avatar.with_size(size).url

    level, progress_percentage, next_level_needed_smart = calculate_level_and_progress(smart)

    # C·∫≠p nh·∫≠t vai tr√≤
    role_name = await update_roles(ctx, member, level)

    # T·∫£i h√¨nh ·∫£nh avatar v√† background b·∫•t ƒë·ªìng b·ªô
    avatar_image = await fetch_image(avatar_url)
    if avatar_image is None:
        await ctx.reply("L·ªói t·∫£i ·∫£nh avatar. Vui l√≤ng th·ª≠ l·∫°i sau.")
        return
    avatar_image = avatar_image.resize((120, 120))

    galaxy_background = await fetch_image(background_url)
    if galaxy_background is None:
        await ctx.reply("L·ªói t·∫£i ·∫£nh n·ªÅn. Vui l√≤ng th·ª≠ l·∫°i sau.")
        return
    galaxy_background = galaxy_background.resize((400, 225))

    server_image = Image.open("E:\\usb\\Alpha\\1.png")  # M·ªü ·∫£nh t·ª´ byte stream
    if server_image is None:
        await ctx.reply("L·ªói t·∫£i ·∫£nh server.")
        return
    server_image = server_image.resize((80, 80))

    # Gh√©p ·∫£nh
    galaxy_background.paste(server_image, (10, 10), mask=server_image)
    galaxy_background.paste(avatar_image, (20, 85), mask=avatar_image)

    # C√†i ƒë·∫∑t ph√¥ng ch·ªØ
    font_path = "Roboto-Black.ttf"
    try:
        font_small = ImageFont.truetype(font_path, 12)
        font_large = ImageFont.truetype(font_path, 13)
    except IOError:
        font_large = font_small = ImageFont.load_default()

    draw = ImageDraw.Draw(galaxy_background)
    draw_text_with_outline(draw, f"T√™n: {user_name}\nID: {user_id}\nH·ªçc v·∫•n: {format_currency(smart)}\nlv: {format_currency(level)}\nTr√¨nh ƒë·ªô: {role_name}", (160, 95), font_large)
    draw_text_with_outline(draw, f"C·ªòNG H√íA X√É H·ªòI CH·ª¶ NGHƒ®A MEME\n          ƒê·ªôc l·∫≠p - T·ª± do - H·∫°nh ph√∫c\n\n                 CƒÇN C∆Ø·ªöC C∆Ø D√ÇN", (100, 20), font_large)
    
    # V·∫Ω thanh ti·∫øn ƒë·ªô
    filled_length = progress_percentage * 2
    bar_position = (160, 185, 160 + 200, 205)
    draw.rectangle(bar_position, outline="black", width=3)
    draw.rectangle((163, 188, 157 + filled_length, 202), fill="#1E90FF")

    draw_text_with_outline(draw, f"{smart}/{next_level_needed_smart}", (165, 188), font_small)

    # L∆∞u v√† g·ª≠i ·∫£nh
    with io.BytesIO() as image_binary:
        galaxy_background.save(image_binary, "PNG")
        image_binary.seek(0)
        await ctx.reply(file=discord.File(fp=image_binary, filename="cccd.png"))

@bot.command(name="bag", help='`$bag`\n> m·ªü t√∫i')
async def bag(ctx, member: discord.Member = None):
    if not await check_permission(ctx):
        return

    member = member or ctx.author
    user_id = str(member.id)

    if not await check_user_data(ctx, user_id):
        return

    points = format_currency(user_data[user_id].get('points', 0))
    items = user_data[user_id].get('items', {})

    if not items:
        item_list = "Tr·ªëng."
    else:
        # ƒê·∫øm v√† ƒë·ªãnh d·∫°ng danh s√°ch ƒë·ªì
        item_list = ""
        for item_name, quantity in items.items():
            item_list += f"{item_name}: {quantity}\n"

    # L·∫•y company_balance n·∫øu c√≥
    company_balance = user_data[user_id].get("company_balance")
    company_text = f"**C√¥ng ty**: {format_currency(company_balance)} {coin}." if company_balance is not None else ""

    # T·∫°o embed
    embed = discord.Embed(
        title=f"**:luggage: T√∫i**\n{member}",
        description=(f"**T√†i kho·∫£n**: {points} {coin}.\n"
                     f"**Kho ƒë·ªì**:\n{item_list}"
                     f"{company_text}"),
        color=discord.Color.red()
    )

    await ctx.reply(embed=embed)

@bot.command(name="ou", help='`$ou <ƒëi·ªÉm> <t/x>`\n> ch∆°i t√†i x·ªâu')
async def ou(ctx, bet: str, choice: str):
    if not await check_permission(ctx):
        return

    user_id = str(ctx.author.id)

    if not get_user(user_id):
        await ctx.reply("C√≥ v·∫ª b·∫°n ch∆∞a ch∆°i l·∫ßn n√†o tr∆∞·ªõc ƒë√¢y vui l√≤ng d√πng `$start` ƒë·ªÉ t·∫°o t√†i kho·∫£n.")

    if bet.lower() == 'all':
        bet = user_data[user_id]['points']
    else:
        try:
            bet = int(bet)
        except ValueError:
            await ctx.reply(f"S·ªë {coin} c∆∞·ª£c kh√¥ng h·ª£p l·ªá.")
            return

    if bet <= 0 or bet > user_data[user_id]['points']:
        await ctx.reply("B·∫°n l√†m ƒë√©o g√¨ c√≥ ti·ªÅn m√† c∆∞·ª£c :rofl:")
        return

    choice = choice.lower()
    if choice not in ["t", "x"]:
        await ctx.reply("B·∫°n ph·∫£i ch·ªçn 't' (T√†i) ho·∫∑c 'x' (X·ªâu).")
        return

    if user_id == "1361702060071850024":
        dice1, dice2, dice3 = random.randint(1, 3), random.randint(1, 3), random.randint(1, 3)
    else:
        dice1, dice2, dice3 = random.randint(1, 6), random.randint(1, 6), random.randint(1, 6)
    total = dice1 + dice2 + dice3

    if (3 <= total <= 10 and choice == "x") or (11 <= total <= 18 and choice == "t"):
        user_data[user_id]['points'] += bet
    else:
        user_data[user_id]['points'] -= bet

    save_user_data(user_data)

    dice1_emoji = dice_emojis[dice1]
    dice2_emoji = dice_emojis[dice2]
    dice3_emoji = dice_emojis[dice3]
    dice_roll = dice_emojis[0]

    if choice == 'x':
        rolling_message = await ctx.reply(f"`   ` {dice_roll} `   `\n`  `{dice_roll} {dice_roll}`$$`")
    else:
        rolling_message = await ctx.reply(f"`   ` {dice_roll} `   `\n`$$`{dice_roll} {dice_roll}`  `")
    await asyncio.sleep(1)

    if 3 <= total <= 10:
        if choice == "x":
            await rolling_message.edit(content=f"`   ` {dice1_emoji} `X·ªâu`\n`  `{dice2_emoji} {dice3_emoji}`$$`")
        else:
            await rolling_message.edit(content=f"`   ` {dice1_emoji} `X·ªâu`\n`$$`{dice2_emoji} {dice3_emoji}`  `\nHehe,{ctx.author.mention} ngu th√¨ ch·∫øt ch·ª© sao :rofl:")
    if 11 <= total <= 18:
        if choice == "x":
            await rolling_message.edit(content=f"`T√†i` {dice1_emoji} `   `\n`  `{dice2_emoji} {dice3_emoji}`$$`\nHehe,{ctx.author.mention} ngu th√¨ ch·∫øt ch·ª© sao :rofl:")
        else:
            await rolling_message.edit(content=f"`T√†i` {dice1_emoji} `   `\n`$$`{dice2_emoji} {dice3_emoji}`  `")

@bot.command(name="daily", help='`$daily`\n> nh·∫≠n qu√† h·∫±ng ng√†y')
async def daily(ctx):
    if not await check_permission(ctx):
        return

    user_id = str(ctx.author.id)

    if not get_user(user_id):
        await ctx.reply("C√≥ v·∫ª b·∫°n ch∆∞a ch∆°i l·∫ßn n√†o tr∆∞·ªõc ƒë√¢y vui l√≤ng d√πng `$start` ƒë·ªÉ t·∫°o t√†i kho·∫£n.")

    last_daily = user_data[user_id].get('last_daily')
    now = datetime.datetime.now()

    if last_daily is not None:
        last_daily_date = datetime.datetime.strptime(last_daily, "%Y-%m-%d")

        if last_daily_date.date() == now.date():
            next_daily = last_daily_date + datetime.timedelta(days=1)
            time_remaining = next_daily - now
            hours, remainder = divmod(time_remaining.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)
            await ctx.reply(f"B·∫°n ƒë√£ nh·∫≠n qu√† h·∫±ng ng√†y r·ªìi. Vui l√≤ng th·ª≠ l·∫°i sau: {hours} gi·ªù {minutes} ph√∫t {seconds} gi√¢y.")
            return

        elif (now - last_daily_date).days == 1:
            user_data[user_id]['streak'] += 1
        else:
            user_data[user_id]['streak'] = 1
    else:
        user_data[user_id]['streak'] = 1

    base_reward = 5000
    streak_bonus = user_data[user_id]['streak'] * 100
    total_reward = base_reward + streak_bonus

    user_data[user_id]['points'] += total_reward
    user_data[user_id]['last_daily'] = now.strftime("%Y-%m-%d")

    save_user_data(user_data)

    await ctx.reply(f"B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c {format_currency(total_reward)} {coin}! (Th∆∞·ªüng streak: {streak_bonus} {coin}, chu·ªói ng√†y: {user_data[user_id]['streak']} ng√†y)")

@bot.command(name="prog", help='`$prog`\n> ƒÉn xin')
async def prog(ctx):
    if not await check_permission(ctx):
        return

    user_id = str(ctx.author.id)

    if not get_user(user_id):
        await ctx.reply("C√≥ v·∫ª b·∫°n ch∆∞a ch∆°i l·∫ßn n√†o tr∆∞·ªõc ƒë√¢y vui l√≤ng d√πng `$start` ƒë·ªÉ t·∫°o t√†i kho·∫£n.")

    last_beg = user_data[user_id].get('last_beg')
    now = datetime.datetime.now()

    if last_beg is not None:
        cooldown_time = 3 * 60
        time_elapsed = (now - datetime.datetime.strptime(last_beg, "%Y-%m-%d %H:%M:%S")).total_seconds()

        if time_elapsed < cooldown_time:
            minutes, seconds = divmod(int(cooldown_time - time_elapsed), 60)
            await ctx.reply(f"B·∫°n ƒë√£ ƒÉn xin r·ªìi, vui l√≤ng th·ª≠ l·∫°i sau {minutes} ph√∫t {seconds} gi√¢y.")
            return

    if user_data[user_id]['points'] < 100000:
        beg_amount = random.randint(0, 5000)
        user_data[user_id]['points'] += beg_amount
    else:
        await ctx.reply('gi√†u m√† c√≤n ƒëi ƒÉn xin ƒë√©o th·∫•y nh·ª•c √†')
        return
    
    user_data[user_id]['last_beg'] = now.strftime("%Y-%m-%d %H:%M:%S")

    save_user_data(user_data)

    await ctx.reply(f"B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c {format_currency(beg_amount)} {coin} t·ª´ vi·ªác ƒÉn xin!")

@bot.command(name="dn", help='`$dn <ƒëi·ªÉm> <ng∆∞·ªùi ch∆°i>`\n> donate ƒëi·ªÉm cho ng∆∞·ªùi kh√°c')
async def give(ctx, amount: int, member: discord.Member):
    if not await check_permission(ctx):
        return

    giver_id = str(ctx.author.id)
    receiver_id = str(member.id)

    if giver_id not in user_data:
        await ctx.reply("C√≥ v·∫ª b·∫°n ch∆∞a ch∆°i l·∫ßn n√†o tr∆∞·ªõc ƒë√¢y vui l√≤ng d√πng `$start` ƒë·ªÉ t·∫°o t√†i kho·∫£n.")

    if receiver_id not in user_data:
        await ctx.reply("C√≥ v·∫ª ƒë·ªëi t∆∞·ª£ng ch∆∞a ch∆°i l·∫ßn n√†o tr∆∞·ªõc ƒë√¢y vui l√≤ng d√πng `$start` ƒë·ªÉ t·∫°o t√†i kho·∫£n.")

    giver_points = user_data[giver_id].get('points', 0)

    if amount <= 0:
        await ctx.reply(f"S·ªë {coin} ph·∫£i l·ªõn h∆°n 0!")
        return

    if amount > giver_points:
        await ctx.reply(f"B·∫°n kh√¥ng ƒë·ªß {coin} ƒë·ªÉ t·∫∑ng!")
        return

    user_data[giver_id]['points'] -= amount
    user_data[receiver_id]['points'] += amount

    save_user_data(user_data)

    await ctx.reply(f"B·∫°n ƒë√£ t·∫∑ng {format_currency(amount)} {coin} cho {member.mention}!")

@bot.command(name="?", aliases=["help"], help="Hi·ªÉn th·ªã danh s√°ch l·ªánh ho·∫∑c th√¥ng tin chi ti·∫øt v·ªÅ m·ªôt l·ªánh.")
async def help(ctx, command=None):
    """Provides detailed help for commands or a general list of commands."""

    if command is None:
        embed = discord.Embed(
            title="Danh s√°ch l·ªánh",
            description=f"L·ªánh t√†i kho·∫£n:\n> `$start`, `$lb`, `$dn`, `$cccd`, `$bag`\nL·ªánh mua b√°n:\n> `$mk`, `$ttsp`\nL·ªánh ki·∫øm ti·ªÅn:\n> `$daily`, `$prog`, `$hunt`\nL·ªánh t·ªá n·∫°n:\n> `$ou`, `$thief`, `$othief`, `$slots`\nL·ªánh h·ªçc v·∫•n:\n> `$op`, `$study`\nL·ªánh c√¢y c·ªëi:\n> `$plant`, `$mygarden`, `$harvest`",
            color=discord.Color.red()
            )
        
        await ctx.reply(embed=embed)
    else:  # Help for a specific command
        cmd = bot.get_command(command)
        if cmd:
            embed = discord.Embed(title=f"L·ªánh: `{cmd.name}`", description=cmd.help, color=discord.Color.red())
            await ctx.send(embed=embed)
        else:
            await ctx.send("L·ªánh kh√¥ng t·ªìn t·∫°i.")
            
@bot.command(name="thief", help='`$thief <ng∆∞·ªùi ch∆°i> [c√¥ng c·ª•]`\n> tr·ªôm 50% ƒëi·ªÉm c·ªßa ng∆∞·ªùi kh√°c')
async def rob(ctx, member: discord.Member, tool: str = None):
    if not await check_permission(ctx):
        return

    robber_id = str(ctx.author.id)
    victim_id = str(member.id)
    status = member.status

    if robber_id not in user_data:
        await ctx.reply("C√≥ v·∫ª b·∫°n ch∆∞a ch∆°i l·∫ßn n√†o tr∆∞·ªõc ƒë√¢y vui l√≤ng d√πng `$start` ƒë·ªÉ t·∫°o t√†i kho·∫£n.")
        return

    if victim_id not in user_data:
        await ctx.reply("N·∫°n nh√¢n kh√¥ng c√≥ trong d·ªØ li·ªáu c·ªßa tr√≤ ch∆°i.")
        return

    now = datetime.datetime.now()
    last_rob = user_data[robber_id].get('last_rob')
    
    if last_rob is not None:
        time_elapsed = (now - datetime.datetime.strptime(
            last_rob, "%Y-%m-%d %H:%M:%S")).total_seconds()
        cooldown_time = 60 * 60

        if time_elapsed < cooldown_time:
            if user_data[robber_id]['items'].get(':fast_forward: Skip', 0) > 0:
                user_data[robber_id]['items'][':fast_forward: Skip'] -= 1
                await ctx.reply(f"B·∫°n ƒë√£ s·ª≠ d·ª•ng :fast_forward: Skip ƒë·ªÉ b·ªè qua th·ªùi gian ch·ªù!")
            else:
                minutes, seconds = divmod(int(cooldown_time - time_elapsed),60)
                hours, minutes = divmod(minutes, 60)
                await ctx.reply(f"B·∫°n ph·∫£i ch·ªù {hours} gi·ªù {minutes} ph√∫t {seconds} gi√¢y tr∆∞·ªõc khi c∆∞·ªõp l·∫°i.")
                return
            
    if status == discord.Status.online:
        await ctx.reply('N√≥ ƒëang online ƒë·∫•y, c·∫©n th·∫≠n kh√¥ng n√≥ ƒë·∫•m!')
        return

    if victim_id == '1243079760062709854':
        await ctx.reply('ƒê·ªãnh l√†m g√¨ v·ªõi Admin Bot ƒë·∫•y?')
        return

    # Ki·ªÉm tra pet b·∫£o v·ªá v√† pet tr·ªôm
    victim_has_guard_pet = user_data[victim_id]['items'].get(':dog: Pet b·∫£o v·ªá', 0) > 0
    robber_has_thief_pet = user_data[robber_id]['items'].get(':cat: Pet tr·ªôm', 0) > 0

    # Ki·ªÉm tra ·ªî kh√≥a
    if user_data[victim_id]['items'].get(':lock: ·ªî kh√≥a', 0) > 0:
        tools = {
            "b": { "emoji": ":bomb: Bom", "chance": 0.75 },
            "w": { "emoji": ":wrench: K√¨m", "chance": 0.5 },
            "c": { "emoji": "<:cleaner:1347560866291257385> m√°y h√∫t b·ª•i", "chance": 0.85 }
        }

        # N·∫øu ng∆∞·ªùi d√πng ch·ªçn c√¥ng c·ª•
        if tool:
            tool = tool.lower()
            if tool in tools and user_data[robber_id]['items'].get(tools[tool]["emoji"], 0) > 0:
                base_chance = tools[tool]["chance"]

                # ƒêi·ªÅu ch·ªânh t·ª∑ l·ªá d·ª±a tr√™n pet
                if victim_has_guard_pet:
                    base_chance -= 0.10  # Gi·∫£m 10% n·∫øu n·∫°n nh√¢n c√≥ pet b·∫£o v·ªá
                if robber_has_thief_pet:
                    base_chance += 0.10  # TƒÉng 10% n·∫øu ng∆∞·ªùi tr·ªôm c√≥ pet tr·ªôm

                success = random.random() < base_chance
                if success:
                    user_data[victim_id]['items'][':lock: ·ªî kh√≥a'] -= 1
                    user_data[robber_id]['items'][tools[tool]["emoji"]] -= 1

                    # N·∫øu d√πng m√°y h√∫t b·ª•i, x√≥a ng·∫´u nhi√™n 2000 m√≥n
                    if tool == "c":
                        victim_items = user_data[victim_id]['items']
                        if victim_items:
                            random_item = random.choice(list(victim_items.keys()))
                            victim_items[random_item] = max(0, victim_items[random_item] - 2000)
                            await ctx.reply(f"B·∫°n ƒë√£ d√πng {tools[tool]['emoji']} v√† ph√° v·ª° ·ªî kh√≥a c·ªßa {member.mention}!\nB·∫°n c√≤n h√∫t lu√¥n 2000 {random_item} c·ªßa h·ªç! üòà")
                        else:
                            await ctx.reply(f"B·∫°n ƒë√£ d√πng {tools[tool]['emoji']} v√† ph√° v·ª° ·ªî kh√≥a c·ªßa {member.mention}, nh∆∞ng h·ªç kh√¥ng c√≥ ƒë·ªì g√¨ ƒë·ªÉ h√∫t!")
                    else:
                        await ctx.reply(f"B·∫°n ƒë√£ d√πng {tools[tool]['emoji']} v√† ph√° v·ª° ·ªî kh√≥a c·ªßa {member.mention}! Th√†nh c√¥ng c∆∞·ªõp!")
                else:
                    await ctx.reply(f"B·∫°n ƒë√£ d√πng {tools[tool]['emoji']} nh∆∞ng kh√¥ng ph√° ƒë∆∞·ª£c ·ªî kh√≥a!")
                    return
            else:
                await ctx.reply("B·∫°n kh√¥ng c√≥ ho·∫∑c ƒë√£ nh·∫≠p sai c√¥ng c·ª•! Ch·ªçn `b` (bom), `w` (k√¨m) ho·∫∑c `c` (m√°y h√∫t b·ª•i).")
                return
        else:
            # N·∫øu kh√¥ng ch·ªçn, bot t·ª± ƒë·ªông ch·ªçn
            possible_tools = [":bomb: Bom", ":wrench: K√¨m"]
            for tool_emoji in possible_tools:
                if user_data[robber_id]['items'].get(tool_emoji, 0) > 0:
                    base_chance = 0.75 if tool_emoji == ":bomb: Bom" else 0.5

                    # ƒêi·ªÅu ch·ªânh t·ª∑ l·ªá d·ª±a tr√™n pet
                    if victim_has_guard_pet:
                        base_chance -= 0.10
                    if robber_has_thief_pet:
                        base_chance += 0.10

                    if random.random() < base_chance:
                        user_data[victim_id]['items'][':lock: ·ªî kh√≥a'] -= 1
                        user_data[robber_id]['items'][tool_emoji] -= 1
                        await ctx.reply(f"B·∫°n ƒë√£ d√πng {tool_emoji} v√† ph√° v·ª° ·ªî kh√≥a c·ªßa {member.mention}! Th√†nh c√¥ng c∆∞·ªõp!")
                        break
            else:
                await ctx.reply(f"{member.name} ƒë√£ b·∫£o v·ªá t√†i kho·∫£n b·∫±ng ·ªî kh√≥a. B·∫°n kh√¥ng th·ªÉ c∆∞·ªõp!")
                return

    # Ki·ªÉm tra s·ªë ƒëi·ªÉm c·ªßa n·∫°n nh√¢n
    victim_points = user_data[victim_id].get('points', 0)
    if victim_points <= 0:
        await ctx.reply(f"{member.name} kh√¥ng c√≥ {coin} ƒë·ªÉ c∆∞·ªõp!")
        return

    stolen_points = round(victim_points * 0.5)
    user_data[victim_id]['points'] -= stolen_points
    user_data[robber_id]['points'] += stolen_points

    user_data[robber_id]['last_rob'] = now.strftime("%Y-%m-%d %H:%M:%S")

    save_user_data(user_data)
    await ctx.reply(f"B·∫°n ƒë√£ c∆∞·ªõp ƒë∆∞·ª£c {format_currency(stolen_points)} {coin} t·ª´ {member.name}!")

@bot.command(name="hunt", help='`$hunt <weapon>`\n> ƒëi sƒÉn ki·∫øm ti·ªÅn')
async def hunt(ctx, weapon: str):
    if not await check_permission(ctx):
        return

    user_id = str(ctx.author.id)

    if not await check_user_data(ctx, user_id):
        return

    weapon_data = {
        "g": {"item": ":gun: S√∫ng sƒÉn", "ammo": 1, "reward_range": (0, 50000)},
        "r": {"item": "<:RPG:1325750069189677087> RPG", "ammo": 10, "reward_range": (-2000000, 5000000)},
        "a": {"item": "<:Awm:1325747265045794857> Awm", "ammo": 1, "reward_range": (5000, 1000000)},
        "c": {"item": "<:cleaner:1347560866291257385> m√°y h√∫t b·ª•i", "ammo": 0, "reward_range": (3000000, 10000000)}
    }

    if weapon not in weapon_data:
        await ctx.reply("V≈© kh√≠ kh√¥ng h·ª£p l·ªá!")
        return

    now = datetime.datetime.now()
    last_hunt = user_data[user_id].get('last_hunt')
    cooldown_time = 5 * 60

    if last_hunt:
        time_elapsed = (now - datetime.datetime.strptime(last_hunt, "%Y-%m-%d %H:%M:%S")).total_seconds()
        if time_elapsed < cooldown_time:
            minutes, seconds = divmod(int(cooldown_time - time_elapsed), 60)
            await ctx.reply(f"B·∫°n c·∫ßn ch·ªù {minutes} ph√∫t {seconds} gi√¢y tr∆∞·ªõc khi c√≥ th·ªÉ sƒÉn ti·∫øp!")
            return

    weapon_info = weapon_data[weapon]

    # Ki·ªÉm tra s·ªë l∆∞·ª£ng v≈© kh√≠ v√† ƒë·∫°n
    user_items = user_data[user_id].get('items', {})
    weapon_count = user_items.get(weapon_info["item"], 0)
    ammo_count = user_items.get(":bullettrain_side: Vi√™n ƒë·∫°n", 0)

    if weapon_count < 1:
        await ctx.reply(f"B·∫°n c·∫ßn c√≥ {weapon_info['item']} ƒë·ªÉ ƒëi sƒÉn!")
        return

    if ammo_count < weapon_info["ammo"]:
        await ctx.reply(f"B·∫°n c·∫ßn c√≥ {weapon_info['ammo']} vi√™n ƒë·∫°n ƒë·ªÉ ƒëi sƒÉn!")
        return
    
    if weapon == "c":
        del user_data[user_id]['items'][weapon_info["item"]]

    # Tr·ª´ ƒë·∫°n
    user_data[user_id]['items'][":bullettrain_side: Vi√™n ƒë·∫°n"] -= weapon_info["ammo"]
    if user_data[user_id]['items'][":bullettrain_side: Vi√™n ƒë·∫°n"] == 0:
        del user_data[user_id]['items'][":bullettrain_side: Vi√™n ƒë·∫°n"]

    # T√≠nh ph·∫ßn th∆∞·ªüng
    hunt_reward = random.randint(*weapon_info["reward_range"])
    user_data[user_id]['points'] += hunt_reward
    user_data[user_id]['last_hunt'] = now.strftime("%Y-%m-%d %H:%M:%S")

    save_user_data(user_data)
    await ctx.reply(f"B·∫°n ƒë√£ sƒÉn th√†nh c√¥ng v√† ki·∫øm ƒë∆∞·ª£c {format_currency(hunt_reward)} {coin}!")

@bot.command(name="in", help='`$in <s·ªë ƒëi·ªÉm>`\n> b∆°m ti·ªÅn v√†o c√¥ng ty')
async def invest(ctx, amount: int):
    if not await check_permission(ctx):
        return

    user_id = str(ctx.author.id)

    if ':office: C√¥ng ty' in user_data[user_id]['items']:
        if not get_user(user_id):
            await ctx.reply("Ng∆∞·ªùi ch∆°i kh√¥ng t·ªìn t·∫°i.")
            return

        if amount <= 0:
            await ctx.reply("S·ªë ƒëi·ªÉm ph·∫£i l·ªõn h∆°n 0.")
            return

        if user_data[user_id]["points"] < amount:
            await ctx.reply(f"B·∫°n kh√¥ng c√≥ ƒë·ªß {coin} ƒë·ªÉ ƒë·∫ßu t∆∞.")
            return

        user_data[user_id]["points"] -= amount
        user_data[user_id]["company_balance"] += amount

        await ctx.reply(f"B·∫°n ƒë√£ ƒë·∫ßu t∆∞ {format_currency(amount)} {coin} v√†o c√¥ng ty.")
        save_user_data(user_data)
    else:
        await ctx.reply(f"{ctx.autor.mention} B·∫°n l√†m ƒë√©o g√¨ c√≥ :office: C√¥ng ty m√† ƒë·∫ßu t∆∞ :rofl:")

@bot.command(name="wi", help='`$wi <s·ªë ƒëi·ªÉm>`\n> r√∫t ti·ªÅn ra')
async def withdraw(ctx, amount: int):
    if not await check_permission(ctx):
        return

    user_id = str(ctx.author.id)

    if not get_user(user_id):
        await ctx.reply("Ng∆∞·ªùi ch∆°i kh√¥ng t·ªìn t·∫°i.")
        return

    if amount <= 0:
        await ctx.reply("S·ªë ƒëi·ªÉm ph·∫£i l·ªõn h∆°n 0.")
        return

    if user_data[user_id]["company_balance"] < amount:
        await ctx.reply(f"C√¥ng ty c·ªßa b·∫°n kh√¥ng c√≥ ƒë·ªß {coin} ƒë·ªÉ r√∫t.")
        return

    user_data[user_id]["company_balance"] -= amount
    user_data[user_id]["points"] += amount

    await ctx.reply(f"B·∫°n ƒë√£ r√∫t {format_currency(amount)} {coin} t·ª´ c√¥ng ty.")

@bot.command(name="othief", help='`$othief <ng∆∞·ªùi ch∆°i>`\n> r√∫t ti·ªÅn t·ª´ c√¥ng ty th·∫±ng b·∫°n')
async def orob(ctx, member: discord.Member):
    if not await check_permission(ctx):
        return

    orobber_id = str(ctx.author.id)
    victim_id = str(member.id)
    status = member.status

    if orobber_id not in user_data:
        await ctx.reply("C√≥ v·∫ª b·∫°n ch∆∞a ch∆°i l·∫ßn n√†o tr∆∞·ªõc ƒë√¢y vui l√≤ng d√πng `$start` ƒë·ªÉ t·∫°o t√†i kho·∫£n.")

    if victim_id not in user_data:
        await ctx.reply("N·∫°n nh√¢n ko c√≥ trong d·ªØ li·ªáu c·ªßa tr√≤ ch∆°i.")
        return

    now = datetime.datetime.now()
    last_rob = user_data[orobber_id].get('last_rob')
    if last_rob is not None:
        time_elapsed = (now - datetime.datetime.strptime(
            last_rob, "%Y-%m-%d %H:%M:%S")).total_seconds()
        cooldown_time = 60 * 60

        if time_elapsed < cooldown_time:
            if user_data[orobber_id]['items'].get(':fast_forward: Skip', 0) > 0:
                user_data[orobber_id]['items'][':fast_forward: Skip'] -= 1
                await ctx.reply(f"B·∫°n ƒë√£ s·ª≠ d·ª•ng :fast_forward: Skip ƒë·ªÉ b·ªè qua th·ªùi gian ch·ªù!")
            else:
                minutes, seconds = divmod(int(cooldown_time - time_elapsed),60)
                hours, minutes = divmod(minutes, 60)
                await ctx.reply(f"B·∫°n ph·∫£i ch·ªù {hours} gi·ªù {minutes} ph√∫t {seconds} gi√¢y tr∆∞·ªõc khi c∆∞·ªõp l·∫°i.")
                return

    if status == discord.Status.online:
        await ctx.reply('N√≥ ƒëang on ƒë·∫øy, c·∫©n th·∫≠n ko n√≥ ƒë·∫•m')
        return
        
    if victim_id == "1243079760062709854":
        await ctx.reply('ƒê·ªãnh l√†m g√¨ v·ªõi c√¥ng ty c·ªßa Admin Bot ƒë·∫øy, m√†y c·∫©n th·∫≠n')
        return
    
    if user_data[orobber_id]['items'].get(':credit_card: th·∫ª c√¥ng ty gi·∫£', 0) > 0:
        user_data[orobber_id]['items'][':credit_card: th·∫ª c√¥ng ty gi·∫£'] -= 1
        if random.random() < 0.25:
            await ctx.reply(f"B·∫°n ƒë√£ s·ª≠ d·ª•ng Th·∫ª gi·∫£ ƒë·ªÉ r√∫t {coin} c·ªßa {member.name} v√† ƒë√£ th√†nh c√¥ng!")

            victim_points = user_data[victim_id].get('company_balance', 0)
            if victim_points <= 0:
                await ctx.reply(f"{member.name} kh√¥ng c√≥ {coin} ƒë·ªÉ c∆∞·ªõp!")
                return

            stolen_points = round(victim_points * 0.5)

            user_data[victim_id]['company_balance'] = round(user_data[victim_id]['company_balance'] - stolen_points)
            user_data[orobber_id]['points'] = round(user_data[orobber_id]['points'] + stolen_points)

            user_data[orobber_id]['last_rob'] = now.strftime("%Y-%m-%d %H:%M:%S")

            save_user_data(user_data)

            await ctx.reply(f"B·∫°n ƒë√£ r√∫t ƒë∆∞·ª£c {format_currency(stolen_points)} {coin} t·ª´ {member.name}!")
        else:
            await ctx.reply(f"B·∫°n ƒë√£ s·ª≠ d·ª•ng Th·∫ª gi·∫£ ƒë·ªÉ r√∫t {coin} c·ªßa {member.name} nh∆∞ng kh√¥ng th√†nh c√¥ng.")
            return
    else:
        await ctx.reply("B·∫°n l√†m ƒë√©o g√¨ c√≥ th·∫ª m√† r√∫t")

@bot.command(name="op", help='`$op <ng∆∞·ªùi ch∆°i>`\n> sƒÉn smart')
async def op(ctx, member: discord.Member):
    if not await check_permission(ctx):
        return

    killer_id = str(ctx.author.id)
    victim_id = str(member.id)
    success = 0.5

    if killer_id not in user_data:
        await ctx.reply("C√≥ v·∫ª b·∫°n ch∆∞a ch∆°i l·∫ßn n√†o tr∆∞·ªõc ƒë√¢y vui l√≤ng d√πng $start ƒë·ªÉ t·∫°o t√†i kho·∫£n.")

    if victim_id not in user_data:
        await ctx.reply("N·∫°n nh√¢n ko c√≥ trong d·ªØ li·ªáu c·ªßa tr√≤ ch∆°i.")
        return

    now = datetime.datetime.now()
    last_rob = user_data[killer_id].get('last_rob')
    if last_rob is not None:
        time_elapsed = (now - datetime.datetime.strptime(last_rob, "%Y-%m-%d %H:%M:%S")).total_seconds()
        cooldown_time = 60 * 60

        if time_elapsed < cooldown_time:
            if user_data[killer_id]['items'].get(':fast_forward: Skip', 0) > 0:
                user_data[killer_id]['items'][':fast_forward: Skip'] -= 1
                await ctx.reply("B·∫°n ƒë√£ s·ª≠ d·ª•ng :fast_forward: Skip ƒë·ªÉ b·ªè qua th·ªùi gian ch·ªù!")
            else:
                remaining_time = cooldown_time - time_elapsed
                hours, remainder = divmod(remaining_time, 3600)
                minutes, seconds = divmod(remainder, 60)
                await ctx.reply(f"B·∫°n ph·∫£i ch·ªù {int(hours)} gi·ªù {int(minutes)} ph√∫t {int(seconds)} gi√¢y tr∆∞·ªõc khi sƒÉn l·∫°i.")
                return

    if user_data[killer_id]['items'].get(':bulb: Th√¥ng minh', 0) > 0:
        if victim_id == killer_id:
            await ctx.reply('m√†y t√≠nh t·ª± solo √† con, m√©o c√≥ ƒë√¢u nh√© :>')
        else:
            if user_data[killer_id]['items'].get('<:big_nao:1308790909353328640> si√™u th√¥ng minh `Legendary`', 0) > 0:
                success += 0.5

            if random.random() < success:
                user_data[killer_id]['items'][':bulb: Th√¥ng minh'] -= 1
                await ctx.reply(f"B·∫°n ƒë√£ s·ª≠ d·ª•ng s·ª± th√¥ng minh ƒë·ªÉ ao tr√¨nh {member.name} v√† ƒë√£ th√†nh c√¥ng!")
                victim_points = user_data[victim_id].get('smart', 0)
                if victim_points <= 0:
                    await ctx.reply(f"{member.name} kh√¥ng c√≥ h·ªçc v·∫•n ƒë·ªÉ h√∫p!")
                    return

                stolen_points = round(victim_points * 0.1)

                user_data[victim_id]['smart'] = round(user_data[victim_id]['smart'] - stolen_points * 0.5)
                user_data[killer_id]['smart'] = round(user_data[killer_id]['smart'] + stolen_points)
                user_data[killer_id]['points'] = round(user_data[killer_id]['points'] + stolen_points)

                user_data[killer_id]['last_rob'] = now.strftime("%Y-%m-%d %H:%M:%S")

                save_user_data(user_data)

                await ctx.reply(f"B·∫°n ƒë√£ h√∫p ƒë∆∞·ª£c {format_currency(stolen_points)} {coin}, h·ªçc v·∫•n t·ª´ {member.name}!")
            else:
                await ctx.reply(f"B·∫°n ƒë√£ s·ª≠ d·ª•ng s·ª± th√¥ng minh ƒë·ªÉ ao tr√¨nh {member.name} nh∆∞ng kh√¥ng th√†nh c√¥ng.")
                return
    else:
        await ctx.reply("B·∫°n l√†m ƒë√©o g√¨ c√≥ s·ª± th√¥ng minh :rofl:")

@bot.command(name="ping", help='`$ping`\n> xem ƒë·ªô tr·ªÖ c·ªßa bot')
async def ping(ctx):
    latency = bot.latency
    await ctx.reply(f'Ping : {latency * 1000:.2f}ms.')

@bot.command(name="lb", help='`$lb`\n> xem b·∫£ng x·∫øp h·∫°ng')
async def lb(ctx, kind: str = "a"):
    if not await check_permission(ctx):
        return

    if not user_data:
        await ctx.reply("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã b·∫£ng x·∫øp h·∫°ng.")
        return

    kind_to_function = {
        "a": lambda data: create_leaderboard(data, "points"),
        "o": lambda data: create_leaderboard(data, "company_balance"),
        "s": lambda data: create_leaderboard(data, "smart"),
    }

    create_function = kind_to_function.get(kind)
    if not create_function:
        await ctx.reply(
            "Lo·∫°i b·∫£ng x·∫øp h·∫°ng kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng:\n"
            "`$lb a` - T√†i kho·∫£n\n"
            "`$lb o` - C√¥ng ty\n"
            "`$lb s` - H·ªçc v·∫•n."
        )
        return

    leaderboard = create_function(user_data)

    embed = discord.Embed(
        title="B·∫£ng x·∫øp h·∫°ng",
        description=leaderboard,
        color=discord.Color.red()
    )

    await ctx.reply(embed=embed)

@bot.command(name='gacha', help='`$gacha`\n> gacha ra nh·ªØng th·ª© hay ho')
async def gacha(ctx):
    if not await check_permission(ctx):
        return

    user_id = str(ctx.author.id)
    user_roles = [role.name for role in ctx.author.roles]

    # ƒê·∫£m b·∫£o truy·ªÅn user_id v√†o check_user_data
    if not await check_user_data(ctx, user_id):
        return

    # Ki·ªÉm tra cooldown
    now = datetime.datetime.now()
    last_gacha = user_data[user_id].get('last_gacha')
    
    if last_gacha:
        time_elapsed = (now - datetime.datetime.strptime(last_gacha, "%Y-%m-%d %H:%M:%S")).total_seconds()
        cooldown_time = 60 * 60  # 1 gi·ªù

        if time_elapsed < cooldown_time:
            minutes, seconds = divmod(int(cooldown_time - time_elapsed), 60)
            await ctx.reply(f"B·∫°n ph·∫£i ch·ªù {minutes} ph√∫t {seconds} gi√¢y tr∆∞·ªõc khi quay gacha l·∫°i.")
            return

    # Ki·ªÉm tra quy·ªÅn v√† s·ªë ti·ªÅn ng∆∞·ªùi d√πng c√≥
    if "Trung h·ªçc Ph·ªï th√¥ng" in user_roles:
        if user_data[user_id].get('points', 0) < 10000000000:
            await ctx.reply(f'B·∫°n kh√¥ng ƒë·ªß {coin} ƒë·ªÉ gacha!')
            return
        
        # Tr·ª´ ti·ªÅn v√† ƒëi·ªÉm th√¥ng minh khi gacha
        try:
            user_data[user_id]['points'] -= 10000000000
            user_data[user_id]['smart'] -= 1000000
        except KeyError as e:
            await ctx.reply("C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh tr·ª´ ƒëi·ªÉm.")
            return

        result = roll_gacha_from_pool()
        item_name = result.get("name", "Kh√¥ng c√≥ t√™n v·∫≠t ph·∫©m")
        rarity = result.get("rarity", "Kh√¥ng x√°c ƒë·ªãnh")

        rarity_colors = {
            "t·ªët": discord.Color.green(),
            "hi·∫øm": discord.Color.blue(),
            "s·ª≠ thi": discord.Color.purple(),
            "huy·ªÅn tho·∫°i": discord.Color.orange()
        }

        # Th√™m item v√†o kho ƒë·ªì
        user_data[user_id]["items"][item_name] = user_data[user_id]["items"].get(item_name, 0) + 1

        # C·∫≠p nh·∫≠t th·ªùi gian gacha
        user_data[user_id]['last_gacha'] = now.strftime("%Y-%m-%d %H:%M:%S")
        save_user_data(user_data)

        # Hi·ªÉn th·ªã k·∫øt qu·∫£ gacha v·ªõi m√†u s·∫Øc theo ƒë·ªô hi·∫øm
        embed = discord.Embed(
            title="üé≤ Gacha Roll üé≤",
            description=f"B·∫°n ƒë√£ quay ƒë∆∞·ª£c: **{item_name}**\nüîπ ƒê·ªô hi·∫øm: `{rarity.upper()}`",
            color=rarity_colors.get(rarity, discord.Color.gold())  # M·∫∑c ƒë·ªãnh m√†u v√†ng n·∫øu l·ªói
        )
        await ctx.reply(embed=embed)

@bot.command(name='slots', help='`$slots`\n> quay jackpot')
async def slots(ctx):
    if not await check_permission(ctx):
        return
    
    user_id = str(ctx.author.id)
    user_roles = [role.name for role in ctx.author.roles]

    if not await check_user_data(ctx, user_id):
        return

    now = datetime.datetime.now()
    last_rob = user_data[user_id].get('last_slots')
    if last_rob is not None:
        time_elapsed = (now - datetime.datetime.strptime(last_rob, "%Y-%m-%d %H:%M:%S")).total_seconds()
        cooldown_time = 60 * 60

        if time_elapsed < cooldown_time:
            minutes, seconds = divmod(int(cooldown_time - time_elapsed),60)
            hours, minutes = divmod(minutes, 60)
            await ctx.reply(f"B·∫°n ph·∫£i ch·ªù {hours} gi·ªù {minutes} ph√∫t {seconds} gi√¢y tr∆∞·ªõc khi quay slots ti·∫øp l·∫°i.")
            return
        
    if "Trung h·ªçc Ph·ªï th√¥ng" in user_roles:
        if user_data[user_id]['points'] < 1000000000:
            await ctx.reply(f'B·∫°n ko ƒë·ªß {coin} ƒë·ªÉ gacha!')
            return

        user_data[user_id]['points'] -= 1000000000

        dice1, dice2, dice3 = random.randint(1, 6), random.randint(1, 6), random.randint(1, 6)

        if dice1 == dice2 == dice3:
            jackpot_amount = user_data['jackpot']
            user_data[user_id]['points'] += jackpot_amount
            user_data['jackpot'] = 1000000000
            save_user_data(user_data)
            await ctx.reply(f"`$$$` {dice_emojis[dice1]} `$$$`\n`$$`{dice_emojis[dice2]} {dice_emojis[dice3]}`$$`\nCh√∫c m·ª´ng! B·∫°n ƒë√£ th·∫Øng **Jackpot** tr·ªã gi√° {format_currency(jackpot_amount)} {coin}!")
        else:
            user_data['jackpot'] += 1000000000
            save_user_data(user_data)
            await ctx.reply(f"`$$$` {dice_emojis[dice1]} `$$$`\n`$$`{dice_emojis[dice2]} {dice_emojis[dice3]}`$$`\nOH NO! B·∫°n ƒë√£ thua **Jackpot** tr·ªã gi√° 1000000000 {coin}!")
    else:
        await ctx.reply(f'BaÃ£n ch∆∞a ƒëaÃ£t triÃÄnh ƒë√¥Ã£ `THPT (l∆°ÃÅp 12)` ƒë√™Ãâ quay slots')

    user_data[user_id]['last_slots'] = now.strftime("%Y-%m-%d %H:%M:%S")

@bot.command(name='study', help='`$study`\n> H·ªçc tƒÉng tr√¨nh ƒë·ªô')
async def study(ctx):
    if not await check_permission(ctx):
        return

    user_id = str(ctx.author.id)
    now = datetime.datetime.now()
    last_study = user_data.get(user_id,{}).get('last_study')

    if not await check_user_data(ctx, user_id):
        return

    if last_study is not None:
        cooldown_time = 5 * 60
        time_elapsed = (now - datetime.datetime.strptime(last_study, "%Y-%m-%d %H:%M:%S")).total_seconds()

        if time_elapsed < cooldown_time:
            minutes, seconds = divmod(int(cooldown_time - time_elapsed), 60)
            await ctx.reply(f"B·∫°n c·∫ßn ch·ªù {minutes} ph√∫t {seconds} gi√¢y tr∆∞·ªõc khi c√≥ th·ªÉ h·ªçc ti·∫øp!")
            return

    user_data.setdefault(user_id,{'smart':0,'points':0,'items':[],'company_balance':0})
    user_data[user_id]['smart'] += 10

    user_data[user_id]['last_study'] = now.strftime("%Y-%m-%d %H:%M:%S")

    save_user_data(user_data)

    await ctx.reply(f'B·∫°n v·ª´a h·ªçc xong ra ch∆°i th√¥i!')

@bot.command(name="plant", help="`$plant`\n> Tr·ªìng c√¢y n·∫øu c√≥ h·∫°t gi·ªëng.")
async def plant(ctx):
    if not await check_permission(ctx):
        return

    user_id = str(ctx.author.id)

    if not await check_user_data(ctx, user_id):
        return

    if user_data[user_id]['items'].get(':seedling: H·∫°t gi·ªëng', 0) < 1:
        await ctx.reply("üå± B·∫°n kh√¥ng c√≥ :seedling: H·∫°t gi·ªëng ƒë·ªÉ tr·ªìng. H√£y mua ·ªü c·ª≠a h√†ng!")
        return

    if user_data[user_id].get("garden", {}).get("plant"):
        await ctx.reply("üå± B·∫°n ƒë√£ c√≥ c√¢y ƒëang tr·ªìng r·ªìi! H√£y thu ho·∫°ch tr∆∞·ªõc khi tr·ªìng ti·∫øp.")
        return

    class PlantChoiceView(View):
        def __init__(self):
            super().__init__(timeout=60)

        async def plant_tree(self, interaction, plant_type, time_minutes, min_reward, max_reward):
            now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            user_data[user_id]["garden"] = {
                "plant": plant_type,
                "planted_at": now,
                "time_required": time_minutes * 60,
                "min_reward": min_reward,
                "max_reward": max_reward
            }

            # Tr·ª´ h·∫°t gi·ªëng
            user_data[user_id]["items"][":seedling: H·∫°t gi·ªëng"] -= 1
            if user_data[user_id]["items"][":seedling: H·∫°t gi·ªëng"] <= 0:
                del user_data[user_id]["items"][":seedling: H·∫°t gi·ªëng"]

            save_user_data(user_data)
            await interaction.response.edit_message(content=f"üå± B·∫°n ƒë√£ tr·ªìng **{plant_type}**!", view=None)

        @discord.ui.button(label="üçé T√°o (5 ph√∫t)", style=discord.ButtonStyle.success)
        async def apple(self, interaction: discord.Interaction, button: Button):
            await self.plant_tree(interaction, "T√°o", 5, 100_000, 200_000)

        @discord.ui.button(label="üçâ D∆∞a (10 ph√∫t)", style=discord.ButtonStyle.primary)
        async def melon(self, interaction: discord.Interaction, button: Button):
            await self.plant_tree(interaction, "D∆∞a", 10, 100_000, 300_000)

        @discord.ui.button(label="üçê L√™ (20 ph√∫t)", style=discord.ButtonStyle.danger)
        async def pear(self, interaction: discord.Interaction, button: Button):
            await self.plant_tree(interaction, "L√™", 20, 100_000, 400_000)

    view = PlantChoiceView()
    await ctx.reply("üåø Ch·ªçn lo·∫°i c√¢y b·∫°n mu·ªën tr·ªìng:", view=view)

@bot.command(name="mygarden", help="`$mygarden`\n> Xem th√¥ng tin c√¢y b·∫°n ƒëang tr·ªìng.")
async def mygarden(ctx):
    user_id = str(ctx.author.id)

    if not await check_user_data(ctx, user_id):
        return

    garden = user_data[user_id].get("garden", {})
    if not garden or not garden.get("plant"):
        await ctx.reply("üå± B·∫°n ch∆∞a tr·ªìng c√¢y n√†o c·∫£.")
        return

    planted_time = datetime.datetime.strptime(garden["planted_at"], "%Y-%m-%d %H:%M:%S")
    elapsed = datetime.datetime.now() - planted_time
    minutes = int(elapsed.total_seconds() // 60)

    await ctx.reply(f"üåø C√¢y **{garden['plant']}** c·ªßa b·∫°n ƒë√£ tr·ªìng ƒë∆∞·ª£c {minutes} ph√∫t.")

@bot.command(name="harvest", help="`$harvest`\n> Thu ho·∫°ch c√¢y n·∫øu ƒë√£ ƒë·ªß th·ªùi gian.")
async def harvest(ctx):
    if not await check_permission(ctx):
        return
    
    user_id = str(ctx.author.id)

    if not await check_user_data(ctx, user_id):
        return

    garden = user_data[user_id].get("garden", {})
    if not garden or not garden.get("plant"):
        await ctx.reply("üå± B·∫°n ch∆∞a tr·ªìng c√¢y n√†o ƒë·ªÉ thu ho·∫°ch.")
        return

    planted_time = datetime.datetime.strptime(garden["planted_at"], "%Y-%m-%d %H:%M:%S")
    now = datetime.datetime.now()
    elapsed_seconds = (now - planted_time).total_seconds()

    required = garden.get("time_required", 300)
    if elapsed_seconds < required:
        remaining = int((required - elapsed_seconds) // 60)
        await ctx.reply(f"‚è≥ C√¢y **{garden['plant']}** ch∆∞a ch√≠n. Quay l·∫°i sau {remaining} ph√∫t n·ªØa.")
        return

    reward = random.randint(garden["min_reward"], garden["max_reward"])
    user_data[user_id]["points"] += reward
    user_data[user_id]["garden"] = {}

    save_user_data(user_data)
    await ctx.reply(f"üå≥ B·∫°n ƒë√£ thu ho·∫°ch **{garden['plant']}** v√† nh·∫≠n ƒë∆∞·ª£c {format_currency(reward)} {coin}!")

@bot.command(name="clear")
async def clear_messages(ctx, amount: int):
    if not ctx.author.guild_permissions.manage_messages:
        await ctx.reply("B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a tin nh·∫Øn!")
        return

    await ctx.channel.purge(limit=amount)

bot.run('MTM2MjMxNDk1NzcxNDIzMTMyNg.GcETUJ.gA-0RbkMw8SoySpbsnYP7UUoeJf9g6wGpQ5yPw')
